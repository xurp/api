# ======================================================================================
# Ported from Gitlab's maven project sample .gitlab-ci.yml
# Refer to: https://gitlab.com/gitlab-org/gitlab-ci-yml/blob/master/Maven.gitlab-ci.yml
# NOTE: STM is using maven official docker image as CI Runner Executor
# See: https://hub.docker.com/_/maven/
# Default Image: 3.5.2-jdk-8-alpine
# ======================================================================================
#
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#
# This template will build and test your projects as well as create the documentation.
#
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.
# * Shows how to use multiple jobs in test stage for verifying functionality
#   with multiple JDKs.
# * Uses site:stage to collect the documentation for multi-module projects.
# * Publishes the documentation for `master` branch.

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -Dspring.profiles.active=staging -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
cache:
  paths:
  - .m2/repository

stages:
- build
- test
- package
- deploy

.maven-project: &maven-project-setup
  # Since we require Maven for this job,
  # we can restrict the job to runners with a certain tag.
  # Of course, it is our duty to actually configure a runner
  # with the tag 'maven' and a working maven installation
  tags:
  - maven
  # - master
  image: maven:3.5.2-jdk-8-alpine

# This will only validate and compile stuff and run e.g. maven-enforcer-plugin.
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
.validate: &validate
  # A job is always executed within a stage.
  # If no stage is set, it defaults to 'test'.
  stage: build
  # Here you can execute arbitrate terminal commands.
  # If any of the commands returns a non zero exit code the job fails.
  script:
  - echo "Building project with maven"
  - 'mvn $MAVEN_CLI_OPTS test-compile'

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
  - echo "Testing project with maven"
  - 'mvn $MAVEN_CLI_OPTS verify'

.maven-package: &maven-package
  stage: package
  script:
  - echo "Packaging project into jar"
  - 'mvn $MAVEN_CLI_OPTS package'
  artifacts:
    paths:
    - target/*.jar

# This is the name of the job.
# You can choose it freely.
maven-build:
  <<: *maven-project-setup
  <<: *validate
  

maven-test:
  <<: *maven-project-setup
  <<: *verify

maven-package:
  <<: *maven-project-setup
  <<: *maven-package

docker-build:
  image: registry.paas.workslan/jobhere/yosolo
  services:
  - registry.paas.workslan/jobhere/dind
  stage: deploy
  only:
  - tags
  variables:
    DOCKER_HOST: "tcp://registry.paas.workslan__jobhere__dind:2375"
    DOCKER_REGISTRY: registry.paas.workslan
    PAAS_APP: jobhere-api
    DOCKER_IMAGE: $DOCKER_REGISTRY/jobhere/$PAAS_APP:$CI_COMMIT_TAG
  before_script:
  - echo $DOCKER_HARBOR_PASSWORD | docker login $DOCKER_REGISTRY --username $DOCKER_HARBOR_USERNAME --password-stdin
  - yosolo login --username $DOCKER_HARBOR_USERNAME --password $DOCKER_HARBOR_PASSWORD
  script:
  - echo "Building docker image $DOCKER_IMAGE"
  - docker build -t $DOCKER_IMAGE .
  - echo "Pushing docker image $DOCKER_IMAGE"
  - docker push $DOCKER_IMAGE
  - echo "Deploying PaaS app $PAAS_APP"
  - yosolo deploy update -a=$PAAS_APP -e=sh-stm --image=$DOCKER_IMAGE
